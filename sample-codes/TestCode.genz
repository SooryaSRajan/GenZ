8==> This code will not compile <==8

tis _myvar of float
tis boolVar of boolean
tis array be {1312, 24, 3, 41, 5} of integer chonky
tis arrayEmpty of integer chonky 20

finesse for noob in sumMethodNew (var of integer) {
   is tis (var + 2 >= 2 || (2 - var) = 0 && 21 <> 21 || !(var <> 12)) {
    _myvar be 0.12 + 32 - var * 32213
   }
   meh {
    boolVar be fax || cap && (1 <> var) && !(var - 2 = 0)
   }
}

finesse for noob in loopStatement(a of integer) {
    do me from 0 to a cheugy tis be x {
        flex "THIS IS A STATEMENT " + x

        is tis (x = 5) {
            flex "LIMIT REACHED, ENDING LOOP " + x
            yeet
        }

    }
}

finesse for noob in printArray(a of integer chonky, b of integer) {

    do me from 0 to b tis be x {
        flex "Array in index " + x + " is " + a giv x
    }

}

finesse for noob in loopStatementWhile(a of integer) {
    do me for a > 0 {
        flex "THIS IS A STATEMENT " + a
        a be a - 1
    }
}

finesse for integer in math(a of integer, b of integer, c of string) {

    is tis(c = "add") {
        clapBack a + b
    }
    or is tis (c = "sub") {
        clapBack a - b
    }
    or is tis (c = "mul") {
        clapBack a * b
    }
    or is tis (c = "div") {
        clapBack a / b
    }
   clapBack 0

}

genz {
    sumMethodNew(12)
    flex boolVar
    flex _myvar
    flex math(12, 42, "add")
    flex math(12, 42, "sub")
    flex math(12, 42, "mul")
    flex math(12, 42, "div")
    loopStatement(10)
    loopStatementWhile(10)
    printArray(array, 4)

    do me from 0 to size of array - 1 tis be x {
        flex array giv x
    }

    tis varx of integer
    gimme varx of integer
    flex varx

    do me from 0 to size of arrayEmpty - 1 tis be x {
        gimme arrayEmpty giv x of integer
    }

    printArray(arrayEmpty, size of arrayEmpty - 1)

}
